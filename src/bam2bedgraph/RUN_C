#!/bin/bash

export BOWTIE_INDEXES="/data/DATA/indexes/"


#export WORK_DIR="/mnt/sf_G_DRIVE/FASTQ-DATA/NIH"
#export WORK_DIR="/data/barskilab/FASTQ-DATA/Experiments-2012/DNA"
#export WORK_DIR="/data/barskilab/FASTQ-DATA/Experiments-2012/YRINA/"
#export WORK_DIR="/data/barskilab/FASTQ-DATA/SARA/"
#export WORK_DIR="/data/barskilab/FASTQ-DATA/MARK/DNA/"
#export WORK_DIR="/data/barskilab/FASTQ-DATA/MARK/RNA/"
#export WORK_DIR="/data/barskilab/FASTQ-DATA/MARK/PAPER1/RNA/"
#export WORK_DIR="/data/barskilab/FASTQ-DATA/JOE/RNA/"
#export WORK_DIR="/data/barskilab/FASTQ-DATA/RAHUL/RNA/"
#export WORK_DIR="/data/barskilab/FASTQ-DATA/CLARK"
#export WORK_DIR="/data/barskilab/FASTQ-DATA/YRINA/RNA"
#export WORK_DIR="/data/barskilab/FASTQ-DATA/Barski/NIH/CD4-CTCF"
#export WORK_DIR="/data/barskilab/FASTQ-DATA/Barski_OLD"
#export WORK_DIR="/data/barskilab/FASTQ-DATA/NamekawaSatoshi/DNA"
#export WORK_DIR="/data/barskilab/FASTQ-DATA/Olsson/"

export WORK_DIR="/data/DATA/FASTQ-DATA/TEST/"

#export GROUP="barskii2"
#export GROUP="barskii5" #CD4 substets RNA-seq
#export GROUP="barskii4" #CD4 substets chromatin
#export GROUP="marcroch"
#export GROUP="markroch1"
#export GROUP="NamekawaSatoshi"
#export GROUP="joe"
#export GROUP="rahul"
export GROUP="test"

export BED_SITESHIFT=0
export BED_WINDOW=20
#export TRIM="-5 6"

#export RUN_ON="rebo" #
#export RUN_ON="hg19c" #
export RUN_ON="hg19" #
#export RUN_ON="mm9" #
#export DUTP="--library-type fr-firststrand"
#export TOPHAT_TRANSCRIPTOME_ONLY=" --no-novel-juncs -T"
export ADD_TOPHAT=" ${DUTP} ${TOPHAT_TRANSCRIPTOME_ONLY} --keep-tmp"
export BED_FORMAT=4 # 4/8

#--no-novel-juncs 
case ${RUN_ON} in 
 "hg19")
   export GENOME=hg19
   echo ${BOWTIE_INDEXES}
#   export TRANSCRIPTOME="--transcriptome-index ${BOWTIE_INDEXES}/hg19_genes"
   export TRANSCRIPTOME="--transcriptome-index ${BOWTIE_INDEXES}/gtf/hg19_refsec_genes"
#   export GFT_FILE="-G /data/barskilab/indexes/hg19_genes.gtf"
   export GFT_FILE="-G ${BOWTIE_INDEXES}/gtf/hg19_refsec_genes.gtf"
 ;;
 "mm9")
   export GENOME=mm9
   export SQLDB="-sql_dbname=mm9"
   export GFT_FILE="-G ${BOWTIE_INDEXES}/mm9_genes.gtf"
   export TRANSCRIPTOME="--transcriptome-index ${BOWTIE_INDEXES}/gtf/mm9_genes"
 ;;
 "hg19c")
   export GENOME=hg19c
   export GFT_FILE="-G ${BOWTIE_INDEXES}/hg19_refsec_genes_control.gtf"
   export TRANSCRIPTOME="--transcriptome-index ${BOWTIE_INDEXES}/gtf/hg19_refsec_genes_control"
 ;;
 "hg19_lupus")
   export GENOME=hg19_lupus
 ;;
 "rebo")
   export GENOME=rebo
#   export GFT_NAME=rebo
   export SUFFIX="_rebo"
 ;;
 *)
 echo "Incorect running parameter"
 exit
 ;;
esac

export BOWTIE_PATH="bowtie"
export TOPHAT_PATH="tophat2"


#module load bowtie/0127 2>/dev/null
#module load python/2.7.1 2>/dev/null
#module load tophat/141 2>/dev/null

#
# Aligment bowtie result to bam & hits
#
#
function do_bw_bam {

ZNA=${NA}.gz

if [ -f ./${ZNA} ]; then
 echo "${ZNA} exist"
 ZC=zcat
else
 ZNA=${NA}
 ZC=cat
fi

case ${1} in
 "bam") 
   if [ -f ./${NA}${SUFFIX}.bam ]; then
    echo "${NA}${SUFFIX}.bam exist"
   else 
    $ZC ${ZNA}|${BOWTIE_PATH} -q -v 2 -m 1 --best --strata -p 11 -S ${TRIM} \
    ${GENOME} - 2>./${NA}${SUFFIX}.bw.log|
    samtools view -Sb - >./${NA}${SUFFIX}.bam 2>/dev/null
    echo "Making .bam complete"
   fi
  ;;
  "hits")
    if [ -f ./${NA}${SUFFIX}.hits -o -f ./${NA}${SUFFIX}.hits.gz ]; then
     echo "${NA}${SUFFIX}.hits exist"
    else 
     $ZC ${ZNA}|${BOWTIE_PATH} -q -v 2 -m 1 --best --strata -p 11 ${TRIM} \
     ${GENOME} - 2>./${NA}${SUFFIX}.bw_h.log >./${NA}${SUFFIX}.hits
     echo "Making .hits complete"
   fi
  ;;
esac

}

#
# Aligment bowtie result to bam & hits
#
#
function do_bw_bam_pair {


case ${1} in
 "bam") 
   if [ -f ./${NA}${SUFFIX}.bam ]; then
    echo "${NA}${SUFFIX}.bam exist"
   else 
    ${BOWTIE_PATH} -q -v 2 -m 1 --best --strata -p 11 -S ${TRIM} \
    ${GENOME} -1 ${NA} -2 ${NA2} 2>./${NA}${SUFFIX}.bw.log|
    samtools view -Sb - >./${NA}${SUFFIX}.bam 2>/dev/null
    echo "Making .bam complete"
   fi
  ;;
  "hits")
    if [ -f ./${NA}${SUFFIX}.hits -o -f ./${NA}${SUFFIX}.hits.gz ]; then
     echo "${NA}${SUFFIX}.hits exist"
    else 
     ${BOWTIE_PATH} -q -v 2 -m 1 --best --strata -p 11 ${TRIM} \
     ${GENOME} -1 ${NA} -2 ${NA2} 2>./${NA}${SUFFIX}.bw_h.log >./${NA}${SUFFIX}.hits
     echo "Making .hits complete"
   fi
  ;;
esac

}


#
# RNA seq aligment by tophat to bam
#
#

function do_tophat_bam {

export c=1
while [ -d ${NA}_${c} ]; do  let c=$c+1; done

FNAME="${NA}_${c}"
#--max-deletion-length 20 --segment-length 20

   if [ -f ./${NA}.bam ]; then
    echo "${NA}.bam exist"
   else 
    ${TOPHAT_PATH} --num-threads 24 -o ${FNAME} ${GFT_FILE} ${ADD_TOPHAT} ${TRANSCRIPTOME} ${BOWTIE_INDEXES}/${GENOME} ${NA}

    mv ./${FNAME}/accepted_hits.bam ./${NA}.bam
    echo "Making .bam by tophat complete"
   fi
}


#
#do bed for sicer, just for upload
#

function do_bed_file {

 echo "depricated"
# if [ -f ./${1}.bed ]; then
#  echo "${1}.bed exist"
# else 
#  rm -f ./logfile.log
#  ${REPO_BASE}/genome-tools/src/sam2bedgraph/sam2bedgraph ${NA}.bam
#  mv -f output.bed ./${1}.bed
#  echo "Making ${1}.bed complete"
# fi

}


#
# if bam file does not exist for fastq file it generates by bowtie in the same directory
# function for uploading generated by sam2bedgraph files into genome browser
#
function upload_bed_mysql {

 do_bw_bam "bam"
 #replace +,=,-,\. on _
 TBL="${NA//[+|=|\-|\.]/_}"
# TBL="${TBL//run*index[0-9]_/}"
# TBL="${TBL//_fastq}"
 bam2bedgraph -sql_table="${TBL}" -in="${NA}.bam" -out="${NA}.out" -log="${NA}.log" -sql_grp="${GROUP}" -bed_window=${BED_WINDOW} -bed_siteshift=${BED_SITESHIFT} -bed_format=${BED_FORMAT} -no-bed-file  ${SQLDB}
 
#"debug/bam2bedgraph.exe" -in="run0146_lane8_read1_index10=ABYR21.fastq.bam" -out="run0146_lane8_read1_index10=ABYR21.fastq.out" -bed_window=20 -bed_siteshift=0 -bed_format=8 -log="run0146_lane8_read1_index10=ABYR21.fastq.log" -sql_table="run0146_lane8_read1_index10_ABYR21" -sql_grp="barskii2" -rna_seq="dUTP" -no-bed-file
 
 
# do_bed_file "${NA}"
# ${REPO_BASE}/genome-tools/scripts/BedLoader.py ${NA} ${GROUP} ${GENOME}
 
}

function upload_bed_mysql_pair {

 do_bw_bam_pair "bam"
 #replace +,=,-,\. on _
# TBL="${NA//[+|=|\-|\.]/_}"
# ${REPO_BASE}/genome-tools/src/bam2bedgraph/bam2bedgraph -sql_table="${TBL}" -in="${NA}.bam" -out="${NA}.out" -log="${NA}.log" -sql_grp="${GROUP}" -bed_window=${BED_WINDOW} -bed_siteshift=${BED_SITESHIFT} -bed_format=${BED_FORMAT} -no-bed-file  ${SQLDB}
}

function upload_tophat_bed_mysql {

 do_tophat_bam 
# do_bed_file "${NA}"

 TBL="${NA//[+|=|\-|\.]/_}"
 bam2bedgraph -sql_table="${TBL}" -in="${NA}.bam" -out="${NA}.out" -log="${NA}.log" -sql_grp="${GROUP}" -bed_window=${BED_WINDOW} -bed_format=${BED_FORMAT} -no-bed-file ${SQLDB}

# ${REPO_BASE}/genome-tools/scripts/BedLoader.py ${NA} ${GROUP} ${GENOME}
}


function do_bowtie_hits {
 do_bw_bam "hits"
}


function do_average {
 do_bw_bam "bam"
 do_bed_file "${NA}"
 ${REPO_BASE}/genome-tools/ 
}

function do_sicer {
 do_bw_bam "bam"
# do_bed_file "${NA}_s"
 bam2bedgraph -in="${NA}.bam" -out="${NA}_s.bed" -log="${NA}_s.log" -bed_window=1 -bed_format=4 -no-sql-upload

# if [ -f "./SICER/${NA}_s-W200-G0-E100.scoreisland" ]; then
#  echo "./SICER/${NA}_s-W200-G0-E100.scoreisland exist"
 if [ -f "./SICER/${NA}_s-1-removed.bed" ]; then
  echo "./SICER/${NA}_s-1-removed.bed exist"
 else
  if [ -f ${NA}_s.bed ]; then
   echo "${NA}_s.bed exist"
  else
  grep -v 'track' ${NA}_s.bed|awk '{ if($4<0) $4=$4*(-1); printf("%s\t%s\t%s\tU%s\t%s\t%s\n",$1,$2,$3,$5,$4,$6);}' >${NA}_so.bed
  mv -f ${NA}_so.bed ${NA}_s.bed
  fi
  mkdirhier ./SICER/
  sh ${REPO_BASE}/genome-tools/thirdparty/SICER1.1/SICER/SICER-rb.sh . ${NA}_s.bed ./SICER hg19 1 50 150 0.74 50 0.1 
 fi
 
# cd ./SICER/
# ${REPO_BASE}/genome-tools/scripts/BedLoaderScicer.py ${NA}_s ${GROUP} ${GENOME}

# sh /usr/src/SICER1.1/SICER/SICER-rb.sh . ${NA}.bed ./OUT hg19 1 200 150 0.74 0 100 &
# mkdirhier /mnt/sf_G_DRIVE/FASTQ-DATA/results/${NA}/OUT
# grep -v 'track' output.bed|awk '{ if($4<0) $4=$4*(-1); printf("%s\t%s\t%s\tU%s\t%s\t%s\n",$1,$2,$3,$5,$4,$6);}' >/mnt/sf_G_DRIVE/FASTQ-DATA/results/${NA}/${NA}.bed

# mkdirhier /mnt/sf_G_DRIVE/FASTQ-DATA/results/${NA}/OUT
# grep -v 'track' output.bed|awk '{ if($4<0) $4=$4*(-1); printf("%s\t%s\t%s\tU%s\t%s\t%s\n",$1,$2,$3,$5,$4,$6);}' >/mnt/sf_G_DRIVE/FASTQ-DATA/results/${NA}/${NA}.bed
# hg19 1 ["window size (bp)"] ["fragment size"] ["effective genome fraction"] ["gap size (bp)"] ["E-value"]
# /usr/src/REPO/genome-tools/scripts/BedLoader.py ${NA}
# cd /mnt/sf_G_DRIVE/FASTQ-DATA/results/${NA}/OUT/
# /usr/src/REPO/genome-tools/scripts/BedLoaderScicer.py ${NA}
# sh /usr/src/SICER1.1/SICER/SICER-rb.sh . ${NA}.bed ./OUT hg19 1 200 150 0.74 0 100 &
}


function do_quest {
 echo "depricated"
 exit
 do_bw_bam "hits"
 quest_dir=`basename ${NA} .fastq`
 quest_dir=${quest_dir}.quest
 if [ -d ${quest_dir} ]; then
  echo "Quest dir [${quest_dir}] already exist."
 else
  ${REPO_BASE}/genome-tools/thirdparty/QuEST_2.4/generate_QuEST_parameters.pl \
  -bowtie_align_ChIP ./${NA}.hits -rp ${ROOT_DIR}/genomes/${GENOME}/ \
  -gt ${ROOT_DIR}/b_indexes/hg19_tb -ap ./${quest_dir}
 fi
}


function do_fence {

 if [ -f ./${1}.fence ]; then
  echo "${1}.fence exist"
 else 
  fence.py ${NA} >${NA}.fence
  echo "Making ${1}.fence complete"
 fi

}


#
# MAIN Function
#

if [ "${1}" == "" ]; then
  echo "
 Programm usage:"
  echo " 
 $0 -bedtophatmsql [LIST]
 $0 -dotophat [LIST]
 $0 -bedmsql [LIST]
 $0 -bedmsql_pair [LIST]
 $0 -bowtiehits [LIST]
 $0 -bowtiebam [LIST]
 $0 -dosicer [LIST]
 $0 -doquest [LIST]
 $0 -doaverage [LIST]
  "
 exit 
fi

LST=${2}
if [ "${LST}" == "" ]; then
 cd ${WORK_DIR}
 for i in `ls -c LIST*`; do
  LST=${i}
  break
 done
if [ "${LST}" == "" ]; then
 LST=./LIST
fi 
fi


# Create new file handle 5
exec 5< ${LST}

#for i in `grep -v '^#' ${LST}`; do
while read i <&5 ; do
# NA=`basename $i .bam` 
echo "${i}"|grep -v "^#" >/dev/null
[ $? -eq 1 ] && continue

 export NA=${i}
 echo ""
 echo "_________________________________________________________________"
 echo $NA 
 
 cd ${WORK_DIR} #/${NA}/

 #do_fence "${NA}"

case ${1} in
  "-bedtophatmsql")
   upload_tophat_bed_mysql
  ;;
  "-dotophat")
   do_tophat_bam
  ;;
  "-bedmsql")
   upload_bed_mysql
  ;;
  "-bedmsql_pair")
   read i2 <&5
    echo $i $i2
    export NA2=${i2}
   upload_bed_mysql_pair
  ;;
  "-bowtiehits")
   do_bowtie_hits
  ;; 
  "-bowtiebam")
   do_bw_bam "bam"
  ;;
  "-dosicer")
   do_sicer
  ;;
  "-doquest")
   do_quest
  ;;
  "-doaverage")
   do_average
  ;;
esac

done




